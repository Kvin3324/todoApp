{"version":3,"sources":["serviceWorker.js","components/Header.js","components/RenderTask.js","components/Tasks.js","components/Footer.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","RenderTask","props","tasks","map","element","key","toString","type","onClick","handleClick","name","Task","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTask","newState","toConsumableArray","state","push","inputTask","current","value","setState","e","deleteTaskState","taskId","indexOf","target","splice","React","createRef","ref","components_RenderTask","Component","Footer","navigator","serviceWorker","ready","then","registration","unregister","MyTodo","components_Header","Tasks","components_Footer","ReactDOM","render","src_MyTodo","document","getElementById"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVSC,MANf,WACI,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAlB,0BCeOC,MAjBf,SAAoBC,GAWlB,OAViBA,EAAMC,MAAMC,IAAI,SAACC,GAAD,OACjCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaM,IAAKD,EAAQE,YACrCV,EAAAC,EAAAC,cAAA,SACES,KAAK,WACLC,QAASP,EAAMQ,YACfC,KAAMN,IAERR,EAAAC,EAAAC,cAAA,aAAKM,EAAL,SCyCSO,cA9Cb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KAORkB,QAAU,WACR,IAAMC,EAAQP,OAAAQ,EAAA,EAAAR,CAAOD,EAAKU,MAAMpB,OAChCkB,EAASG,KAAKX,EAAKY,UAAUC,QAAQC,OAErCd,EAAKe,SAAS,CACZzB,MAAOkB,KAbQR,EAiBnBH,YAAc,SAACmB,GACb,IAAMC,EAAehB,OAAAQ,EAAA,EAAAR,CAAOD,EAAKU,MAAMpB,OACjC4B,EAASD,EAAgBE,QAAQH,EAAEI,OAAOtB,MAEhDmB,EAAgBI,OAAOH,EAAQ,GAE/BlB,EAAKe,SAAS,CACZzB,MAAO2B,KAtBTjB,EAAKY,UAAYU,IAAMC,YACvBvB,EAAKU,MAAQ,CACXpB,MAAO,IAJQU,wEA6BjB,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,qBAAqBqC,IAAKrB,KAAKS,YAChD5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBS,QAASO,KAAKI,SAAzD,mBAGJvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBqC,IAAI,gBAClCxC,EAAAC,EAAAC,cAACuC,EAAD,CAAYnC,MAAOa,KAAKO,MAAMpB,MAAOO,YAAaM,KAAKN,uBAxC9CyB,IAAMI,WCIVC,MANf,WACI,OACI3C,EAAAC,EAAAC,cAAA,oCJ6HF,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mBKrHbC,mLAGF,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,cAPaf,IAAMI,WAa3BY,IAASC,OACPvD,EAAAC,EAAAC,cAACsD,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.13a33a19.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nfunction Header() {\n    return (\n        <header className=\"title\">My TodoDo list</header>\n    )\n}\n\nexport default Header","import React from 'react';\n\nfunction RenderTask(props) {\n  const taskList = props.tasks.map((element) =>\n  <div className=\"input-item\" key={element.toString()}>\n      <input\n        type=\"checkbox\"\n        onClick={props.handleClick}\n        name={element}\n        />\n      <p> {element} </p>\n    </div>\n  )\n  return (\n    taskList\n  );\n\n}\n\nexport default RenderTask;","/* eslint-disable no-unused-expressions */\nimport React from 'react'\nimport RenderTask from './RenderTask';\n\nclass Task extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputTask = React.createRef();\n    this.state = {\n      tasks: []\n    }\n  }\n\n  addTask = () => {\n    const newState = [...this.state.tasks];\n    newState.push(this.inputTask.current.value);\n\n    this.setState({\n      tasks: newState\n    })\n  }\n\n  handleClick = (e) => {\n    const deleteTaskState = [...this.state.tasks]\n    const taskId = deleteTaskState.indexOf(e.target.name)\n\n    deleteTaskState.splice(taskId, 1);\n\n    this.setState({\n      tasks: deleteTaskState\n    })\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"start--task\">\n          <h3>Todo:</h3>\n          <input className=\"start--task--input\" ref={this.inputTask}></input>\n          <div className=\"start-task--btn-add\">\n            <button className=\"btn btn-secondary mt-2\" onClick={this.addTask}>Add your task</button>\n          </div>\n        </div>\n        <div className=\"display--tasks\" ref=\"displayTasks\">\n          <RenderTask tasks={this.state.tasks} handleClick={this.handleClick} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Task","import React from 'react';\n\nfunction Footer() {\n    return (\n        <footer>\"It's your turn\"</footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport Footer from './components/Footer'\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nclass MyTodo extends React.Component {\n\n  render() {\n    return (\n      <div className=\"my-todo-list\">\n        <Header />\n        <Tasks />\n        <Footer />\n      </div>\n    );\n}\n}\n\nReactDOM.render(\n  <MyTodo />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}